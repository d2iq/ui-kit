"use strict";(self.webpackChunk_d2iq_ui_kit=self.webpackChunk_d2iq_ui_kit||[]).push([[4638],{"./node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{aD:()=>chunk_AY7I2SME_action});var ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`;const esm_browser_native={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let getRandomValues;const rnds8=new Uint8Array(16);function rng(){if(!getRandomValues&&(getRandomValues="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!getRandomValues))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return getRandomValues(rnds8)}const byteToHex=[];for(let i=0;i<256;++i)byteToHex.push((i+256).toString(16).slice(1));function unsafeStringify(arr,offset=0){return byteToHex[arr[offset+0]]+byteToHex[arr[offset+1]]+byteToHex[arr[offset+2]]+byteToHex[arr[offset+3]]+"-"+byteToHex[arr[offset+4]]+byteToHex[arr[offset+5]]+"-"+byteToHex[arr[offset+6]]+byteToHex[arr[offset+7]]+"-"+byteToHex[arr[offset+8]]+byteToHex[arr[offset+9]]+"-"+byteToHex[arr[offset+10]]+byteToHex[arr[offset+11]]+byteToHex[arr[offset+12]]+byteToHex[arr[offset+13]]+byteToHex[arr[offset+14]]+byteToHex[arr[offset+15]]}const esm_browser_v4=function v4(options,buf,offset){if(esm_browser_native.randomUUID&&!buf&&!options)return esm_browser_native.randomUUID();const rnds=(options=options||{}).random||(options.rng||rng)();if(rnds[6]=15&rnds[6]|64,rnds[8]=63&rnds[8]|128,buf){offset=offset||0;for(let i=0;i<16;++i)buf[offset+i]=rnds[i];return buf}return unsafeStringify(rnds)};var external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("@storybook/preview-api"),chunk_AY7I2SME_config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,(proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name)))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a};function chunk_AY7I2SME_action(name,options={}){let actionOptions={...chunk_AY7I2SME_config,...options},handler=function(...args){let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id=esm_browser_v4(),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler}},"./packages/formStructure/stories/fieldList.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefaultUncontrolledInputs:()=>DefaultUncontrolledInputs,DisabledRows:()=>DisabledRows,EditableFieldsControlledInputs:()=>EditableFieldsControlledInputs,VariedColumnWidths:()=>VariedColumnWidths,WAddButton:()=>WAddButton,WithColumnSeparators:()=>WithColumnSeparators,__namedExportsOrder:()=>__namedExportsOrder,default:()=>fieldList_stories});var react=__webpack_require__("./node_modules/react/index.js"),dist=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs"),formStructure=__webpack_require__("./packages/formStructure/index.ts"),textInput=__webpack_require__("./packages/textInput/index.ts");const FieldListHelper=props=>{const[items,setItems]=react.useState(props.items);return props.children({items,onFieldUpdate:(rowIndex,valueKey)=>e=>{const updatedItems=(ts=items,i=rowIndex,obj={...items[rowIndex],[valueKey]:e.currentTarget.value},ts.map(((t,j)=>i===j?{...t,...obj}:t)));var ts,i,obj;setItems(updatedItems)},onRemoveItem:rowIndex=>()=>{setItems(items.filter(((_n,i)=>rowIndex!==i)))},onAddItem:newItem=>{setItems([...items,newItem])}})},FieldListStoryHelper=react.memo(FieldListHelper);try{FieldListHelper.displayName="FieldListHelper",FieldListHelper.__docgenInfo={description:"",displayName:"FieldListHelper",props:{items:{defaultValue:null,description:"",name:"items",required:!0,type:{name:"any[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/formStructure/stories/helpers/FieldListStoryHelper.tsx#FieldListHelper"]={docgenInfo:FieldListHelper.__docgenInfo,name:"FieldListHelper",path:"packages/formStructure/stories/helpers/FieldListStoryHelper.tsx#FieldListHelper"})}catch(__react_docgen_typescript_loader_error){}var typography=__webpack_require__("./packages/styleUtils/typography/index.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const mockItems=[{name:"Brian Vaughn",role:"Software Engineer",city:"San Jose",id:0},{name:"Jon Doe",role:"Product engineer",city:"Mountain View",id:1},{name:"Jane Doe",role:"UX Designer",city:"San Francisco",id:2}],testFieldUpdateHandler=(rowIndex,pathToValue)=>()=>(0,dist.aD)(`update row ${rowIndex} with the property that has the key ${pathToValue}`),fieldList_stories={title:"Forms/Form structure/FieldList",component:formStructure.q5,subcomponents:{FieldListColumn:formStructure.JN,FieldListColumnSeparator:formStructure.yW,FieldListAddButton:formStructure.A3}},EditableFieldsControlledInputs={render:args=>react.createElement(FieldListStoryHelper,{items:mockItems},(({onRemoveItem,onAddItem,onFieldUpdate,items})=>react.createElement(react.Fragment,null,react.createElement(formStructure.q5,_extends({data:items,onRemoveItem,onAddItem:()=>onAddItem({name:"",role:"",city:"",id:Math.random()}),pathToUniqueKey:"id"},args),react.createElement(formStructure.JN,{key:"name",header:"Name",pathToValue:"name",onChange:onFieldUpdate},(({defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({value,onChange},defaultProps)))),react.createElement(formStructure.JN,{key:"role",header:"Role",pathToValue:"role",onChange:onFieldUpdate},(({defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({value,onChange},defaultProps)))),react.createElement(formStructure.JN,{key:"city",header:"City",pathToValue:"city",onChange:onFieldUpdate},(({defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({value,onChange},defaultProps)))),react.createElement(formStructure.A3,null,"Add Field")),react.createElement("div",{style:{marginTop:"1em"}},react.createElement("div",null,"FieldList data:"),react.createElement("div",{style:{background:"#eee",padding:"0.5em"}},react.createElement(typography.iA,{tag:"pre"},JSON.stringify(items,null,2)))))))},DefaultUncontrolledInputs={render:args=>react.createElement(formStructure.q5,_extends({data:mockItems,pathToUniqueKey:"id"},args),react.createElement(formStructure.JN,{key:"name",header:"Name",pathToValue:"name",onChange:testFieldUpdateHandler},(({defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({value,onChange},defaultProps)))),react.createElement(formStructure.JN,{key:"role",header:"Role",pathToValue:"role"},(({defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({value,onChange},defaultProps)))),react.createElement(formStructure.JN,{key:"city",header:"City",pathToValue:"city"},(({defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({value,onChange},defaultProps)))))},VariedColumnWidths={render:args=>react.createElement(formStructure.q5,_extends({data:mockItems,pathToUniqueKey:"id"},args),react.createElement(formStructure.JN,{key:"name",header:"Name",pathToValue:"name",onChange:testFieldUpdateHandler},(({defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({value,onChange},defaultProps)))),react.createElement(formStructure.JN,{key:"role",header:"Role",pathToValue:"role",onChange:testFieldUpdateHandler},(({defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({value,onChange},defaultProps)))),react.createElement(formStructure.JN,{key:"city",header:"City",pathToValue:"city",onChange:testFieldUpdateHandler,minWidth:100,maxWidth:200},(({defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({value,onChange},defaultProps)))))},DisabledRows={render:args=>react.createElement(formStructure.q5,{data:mockItems,disabledRows:[1],pathToUniqueKey:"id"},react.createElement(formStructure.JN,_extends({key:"name",header:"Name",pathToValue:"name",onChange:testFieldUpdateHandler},args),(({disabled,defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({disabled,value,onChange},defaultProps)))),react.createElement(formStructure.JN,{key:"role",header:"Role",pathToValue:"role",onChange:testFieldUpdateHandler},(({disabled,defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({disabled,value,onChange},defaultProps)))),react.createElement(formStructure.JN,{key:"city",header:"City",pathToValue:"city",onChange:testFieldUpdateHandler},(({disabled,defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({disabled,value,onChange},defaultProps)))))},WAddButton=()=>react.createElement(formStructure.q5,{data:mockItems,pathToUniqueKey:"id"},react.createElement(formStructure.JN,{key:"name",header:"Name",pathToValue:"name",onChange:testFieldUpdateHandler},(({defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({value,onChange},defaultProps)))),react.createElement(formStructure.JN,{key:"role",header:"Role",pathToValue:"role",onChange:testFieldUpdateHandler},(({defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({value,onChange},defaultProps)))),react.createElement(formStructure.JN,{key:"city",header:"City",pathToValue:"city",onChange:testFieldUpdateHandler},(({defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({value,onChange},defaultProps)))),react.createElement(formStructure.A3,null,"Add a row")),WithColumnSeparators={render:args=>react.createElement(formStructure.q5,_extends({data:mockItems,pathToUniqueKey:"id"},args),react.createElement(formStructure.JN,{key:"name",header:"Name",pathToValue:"name",onChange:testFieldUpdateHandler},(({defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({value,onChange},defaultProps)))),react.createElement(formStructure.yW,{key:"separator1"},":"),react.createElement(formStructure.JN,{key:"role",header:"Role",pathToValue:"role",onChange:testFieldUpdateHandler},(({defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({value,onChange},defaultProps)))),react.createElement(formStructure.yW,{key:"separator2"},"👉"),react.createElement(formStructure.JN,{key:"city",header:"City",pathToValue:"city",onChange:testFieldUpdateHandler},(({defaultProps,onChange,value})=>react.createElement(textInput.oi,_extends({value,onChange},defaultProps)))))};EditableFieldsControlledInputs.parameters={...EditableFieldsControlledInputs.parameters,docs:{...EditableFieldsControlledInputs.parameters?.docs,source:{originalSource:"{\n  render: Template\n}",...EditableFieldsControlledInputs.parameters?.docs?.source}}},DefaultUncontrolledInputs.parameters={...DefaultUncontrolledInputs.parameters,docs:{...DefaultUncontrolledInputs.parameters?.docs,source:{originalSource:'{\n  render: args => {\n    return <FieldList data={mockItems} pathToUniqueKey="id" {...args}>\n        <FieldListColumn key="name" header="Name" pathToValue="name" onChange={testFieldUpdateHandler}>\n          {({\n          defaultProps,\n          onChange,\n          value\n        }) => <TextInput value={value} onChange={onChange} {...defaultProps} />}\n        </FieldListColumn>\n        <FieldListColumn key="role" header="Role" pathToValue="role">\n          {({\n          defaultProps,\n          onChange,\n          value\n        }) => <TextInput value={value} onChange={onChange} {...defaultProps} />}\n        </FieldListColumn>\n        <FieldListColumn key="city" header="City" pathToValue="city">\n          {({\n          defaultProps,\n          onChange,\n          value\n        }) => <TextInput value={value} onChange={onChange} {...defaultProps} />}\n        </FieldListColumn>\n      </FieldList>;\n  }\n}',...DefaultUncontrolledInputs.parameters?.docs?.source}}},VariedColumnWidths.parameters={...VariedColumnWidths.parameters,docs:{...VariedColumnWidths.parameters?.docs,source:{originalSource:'{\n  render: args => <FieldList data={mockItems} pathToUniqueKey="id" {...args}>\n      <FieldListColumn key="name" header="Name" pathToValue="name" onChange={testFieldUpdateHandler}>\n        {({\n        defaultProps,\n        onChange,\n        value\n      }) => <TextInput value={value} onChange={onChange} {...defaultProps} />}\n      </FieldListColumn>\n      <FieldListColumn key="role" header="Role" pathToValue="role" onChange={testFieldUpdateHandler}>\n        {({\n        defaultProps,\n        onChange,\n        value\n      }) => <TextInput value={value} onChange={onChange} {...defaultProps} />}\n      </FieldListColumn>\n      <FieldListColumn key="city" header="City" pathToValue="city" onChange={testFieldUpdateHandler} minWidth={100} maxWidth={200}>\n        {({\n        defaultProps,\n        onChange,\n        value\n      }) => <TextInput value={value} onChange={onChange} {...defaultProps} />}\n      </FieldListColumn>\n    </FieldList>\n}',...VariedColumnWidths.parameters?.docs?.source}}},DisabledRows.parameters={...DisabledRows.parameters,docs:{...DisabledRows.parameters?.docs,source:{originalSource:'{\n  render: args => <FieldList data={mockItems} disabledRows={[1]} pathToUniqueKey="id">\n      <FieldListColumn key="name" header="Name" pathToValue="name" onChange={testFieldUpdateHandler} {...args}>\n        {({\n        disabled,\n        defaultProps,\n        onChange,\n        value\n      }) => <TextInput disabled={disabled} value={value} onChange={onChange} {...defaultProps} />}\n      </FieldListColumn>\n      <FieldListColumn key="role" header="Role" pathToValue="role" onChange={testFieldUpdateHandler}>\n        {({\n        disabled,\n        defaultProps,\n        onChange,\n        value\n      }) => <TextInput disabled={disabled} value={value} onChange={onChange} {...defaultProps} />}\n      </FieldListColumn>\n      <FieldListColumn key="city" header="City" pathToValue="city" onChange={testFieldUpdateHandler}>\n        {({\n        disabled,\n        defaultProps,\n        onChange,\n        value\n      }) => <TextInput disabled={disabled} value={value} onChange={onChange} {...defaultProps} />}\n      </FieldListColumn>\n    </FieldList>\n}',...DisabledRows.parameters?.docs?.source}}},WAddButton.parameters={...WAddButton.parameters,docs:{...WAddButton.parameters?.docs,source:{originalSource:'() => <FieldList data={mockItems} pathToUniqueKey="id">\n    <FieldListColumn key="name" header="Name" pathToValue="name" onChange={testFieldUpdateHandler}>\n      {({\n      defaultProps,\n      onChange,\n      value\n    }) => <TextInput value={value} onChange={onChange} {...defaultProps} />}\n    </FieldListColumn>\n    <FieldListColumn key="role" header="Role" pathToValue="role" onChange={testFieldUpdateHandler}>\n      {({\n      defaultProps,\n      onChange,\n      value\n    }) => <TextInput value={value} onChange={onChange} {...defaultProps} />}\n    </FieldListColumn>\n    <FieldListColumn key="city" header="City" pathToValue="city" onChange={testFieldUpdateHandler}>\n      {({\n      defaultProps,\n      onChange,\n      value\n    }) => <TextInput value={value} onChange={onChange} {...defaultProps} />}\n    </FieldListColumn>\n    <FieldListAddButton>Add a row</FieldListAddButton>\n  </FieldList>',...WAddButton.parameters?.docs?.source}}},WithColumnSeparators.parameters={...WithColumnSeparators.parameters,docs:{...WithColumnSeparators.parameters?.docs,source:{originalSource:'{\n  render: args => <FieldList data={mockItems} pathToUniqueKey="id" {...args}>\n      <FieldListColumn key="name" header="Name" pathToValue="name" onChange={testFieldUpdateHandler}>\n        {({\n        defaultProps,\n        onChange,\n        value\n      }) => <TextInput value={value} onChange={onChange} {...defaultProps} />}\n      </FieldListColumn>\n      <FieldListColumnSeparator key="separator1">:</FieldListColumnSeparator>\n      <FieldListColumn key="role" header="Role" pathToValue="role" onChange={testFieldUpdateHandler}>\n        {({\n        defaultProps,\n        onChange,\n        value\n      }) => <TextInput value={value} onChange={onChange} {...defaultProps} />}\n      </FieldListColumn>\n      <FieldListColumnSeparator key="separator2">👉</FieldListColumnSeparator>\n      <FieldListColumn key="city" header="City" pathToValue="city" onChange={testFieldUpdateHandler}>\n        {({\n        defaultProps,\n        onChange,\n        value\n      }) => <TextInput value={value} onChange={onChange} {...defaultProps} />}\n      </FieldListColumn>\n    </FieldList>\n}',...WithColumnSeparators.parameters?.docs?.source}}};const __namedExportsOrder=["EditableFieldsControlledInputs","DefaultUncontrolledInputs","VariedColumnWidths","DisabledRows","WAddButton","WithColumnSeparators"]}}]);