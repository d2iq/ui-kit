import tablemark from "tablemark";
const dateHeader = `
   Do not edit directly
   Generated by style-dictionary on ${new Date()}
`;
const getSwatch = prop => {
  if (prop.attributes.category === "color") {
    return {
      Swatch: /^#([0-9A-F]{3}){1,2}$/i.test(prop.value)
        ? `![${
            prop.name
          } color swatch](https://via.placeholder.com/100x33/${prop.value.substr(
            1
          )}/000000?text=+)`
        : "N/A"
    };
  }
  if (prop.attributes.type === "iconSize") {
    return {
      Swatch: `![](https://via.placeholder.com/${parseInt(prop.value, 10)}/)`
    };
  }

  return {};
};

const getAliasOriginal = prop => {
  if (prop.attributes.originalFromAlias) {
    return {
      "Alias for": prop.attributes.originalFromAlias
    };
  }

  return {};
};

const getMarkdownTable = properties =>
  tablemark(
    properties.map(prop => ({
      ...getSwatch(prop),
      "JS Variable Name": prop.name,
      Value: prop.value,
      ...getAliasOriginal(prop)
    }))
  );

const commonJS = {
  name: "typescript/es6",
  formatter: dictionary =>
    `/**\n${dateHeader}\n*/\n${dictionary.allProperties
      .map(prop => `export const ${prop.name}: string = "${prop.value}";`)
      .join("\n")}`
};

const markdown = {
  name: "markdown",
  formatter: dictionary =>
    `<!--\n${dateHeader}\n-->\n${getMarkdownTable(dictionary.allProperties)}`
};

const getMarkdownTablesByType = (dictionary, typeDisplayNameMap) => {
  const unMappedTypes = dictionary.allProperties.filter(
    prop => !Object.keys(typeDisplayNameMap).includes(prop.attributes.type)
  );

  const layoutTokensByType = {
    ...Object.keys(typeDisplayNameMap).reduce((acc, type) => {
      const typeDisplayName = typeDisplayNameMap[type];

      acc[typeDisplayName] = dictionary.allProperties.filter(
        prop => prop.attributes.type === type
      );

      return acc;
    }, {}),
    ...(unMappedTypes.length ? { Other: unMappedTypes } : {})
  };

  return `<!--\n${dateHeader}\n-->\n${Object.keys(layoutTokensByType)
    .map(type => `## ${type}\n\n${getMarkdownTable(layoutTokensByType[type])}`)
    .join("\n---\n\n")}`;
};

const markdownLayout = {
  name: "markdownLayout",
  formatter: dictionary => {
    const typeDisplayNameMap = {
      breakpoint: "Breakpoints",
      containerWidth: "Container Widths",
      iconSize: "Icon Sizes",
      space: "Spacing"
    };

    return getMarkdownTablesByType(dictionary, typeDisplayNameMap);
  }
};

const markdownColor = {
  name: "markdownColor",
  formatter: dictionary => {
    const typeDisplayNameMap = {
      base: "All Colors",
      text: "Text",
      border: "Borders",
      aliases: "Other Aliases"
    };
    return getMarkdownTablesByType(dictionary, typeDisplayNameMap);
  }
};

export default [commonJS, markdown, markdownLayout, markdownColor];
