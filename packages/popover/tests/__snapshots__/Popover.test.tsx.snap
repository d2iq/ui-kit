// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Popover renders a closed dropdown 1`] = `
.emotion-0 {
  display: inline-block;
}

.emotion-1 {
  background: none;
  border: 0;
  color: inherit;
  font: inherit;
  line-height: normal;
  overflow: visible;
  padding: 0;
  text-align: inherit;
  cursor: pointer;
}

.emotion-1::-moz-focus-inner {
  border: 0;
  padding: 0;
}

.emotion-1>div:focus {
  outline: none;
}

.emotion-1:focus>div {
  outline-color: Highlight;
  outline-width: thin;
}

@media (-webkit-min-device-pixel-ratio: 0) {
  .emotion-1:focus>div {
    outline-color: -webkit-focus-ring-color;
    outline-style: auto;
    outline-width: unset;
  }
}

<Popover
  data-cy="popover"
  trigger="Dropdown trigger"
>
  <div
    className="emotion-0"
  >
    <Dropdownable
      dropdown={
        <Popover
          data-cy="popover"
          id="dropdown1"
          role="dialog"
          showPointerCaret={true}
        >
          <FocusLockCombination
            disabled={true}
          >
            .emotion-0:focus {
  outline: none;
}

<div
              className="emotion-0"
              tabIndex={-1}
            >
              <SpacingBox
                side="all"
                spacingSize="m"
                tag="div"
              >
                <div>
                  dropdown content
                </div>
              </SpacingBox>
            </div>
          </FocusLockCombination>
        </Popover>
      }
      isOpen={false}
      preferredDirections={
        Array [
          "bottom",
          "top",
          "top-start",
          "top-end",
          "bottom-start",
          "bottom-end",
        ]
      }
    >
      <div>
        <ResetButton
          aria-expanded={false}
          aria-owns="dropdown1"
          onBlur={[Function]}
          onClick={[Function]}
          onKeyDown={[Function]}
        >
          <button
            aria-expanded={false}
            aria-owns="dropdown1"
            className="emotion-1"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <div
              tabIndex={-1}
            >
              Dropdown trigger
            </div>
          </button>
        </ResetButton>
      </div>
    </Dropdownable>
  </div>
</Popover>
`;

exports[`Popover renders a dropdown with a max width and max height 1`] = `
.emotion-0 {
  display: inline-block;
}

.emotion-1 {
  background: none;
  border: 0;
  color: inherit;
  font: inherit;
  line-height: normal;
  overflow: visible;
  padding: 0;
  text-align: inherit;
  cursor: pointer;
}

.emotion-1::-moz-focus-inner {
  border: 0;
  padding: 0;
}

.emotion-1>div:focus {
  outline: none;
}

.emotion-1:focus>div {
  outline-color: Highlight;
  outline-width: thin;
}

@media (-webkit-min-device-pixel-ratio: 0) {
  .emotion-1:focus>div {
    outline-color: -webkit-focus-ring-color;
    outline-style: auto;
    outline-width: unset;
  }
}

<Popover
  data-cy="popover"
  maxHeight={50}
  maxWidth={50}
  trigger="Dropdown trigger"
>
  <div
    className="emotion-0"
  >
    <Dropdownable
      dropdown={
        <Popover
          data-cy="popover"
          id="dropdown3"
          maxHeight={50}
          maxWidth={50}
          role="dialog"
          showPointerCaret={true}
        >
          <FocusLockCombination
            disabled={true}
          >
            .emotion-0:focus {
  outline: none;
}

<div
              className="emotion-0"
              tabIndex={-1}
            >
              <SpacingBox
                side="all"
                spacingSize="m"
                tag="div"
              >
                <div>
                  dropdown content
                </div>
              </SpacingBox>
            </div>
          </FocusLockCombination>
        </Popover>
      }
      isOpen={false}
      preferredDirections={
        Array [
          "bottom",
          "top",
          "top-start",
          "top-end",
          "bottom-start",
          "bottom-end",
        ]
      }
    >
      <div>
        <ResetButton
          aria-expanded={false}
          aria-owns="dropdown3"
          onBlur={[Function]}
          onClick={[Function]}
          onKeyDown={[Function]}
        >
          <button
            aria-expanded={false}
            aria-owns="dropdown3"
            className="emotion-1"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <div
              tabIndex={-1}
            >
              Dropdown trigger
            </div>
          </button>
        </ResetButton>
      </div>
    </Dropdownable>
  </div>
</Popover>
`;

exports[`Popover renders an open dropdown 1`] = `
.emotion-0 {
  display: inline-block;
}

.emotion-1 {
  background: none;
  border: 0;
  color: inherit;
  font: inherit;
  line-height: normal;
  overflow: visible;
  padding: 0;
  text-align: inherit;
  cursor: pointer;
}

.emotion-1::-moz-focus-inner {
  border: 0;
  padding: 0;
}

.emotion-1>div:focus {
  outline: none;
}

.emotion-1:focus>div {
  outline-color: Highlight;
  outline-width: thin;
}

@media (-webkit-min-device-pixel-ratio: 0) {
  .emotion-1:focus>div {
    outline-color: -webkit-focus-ring-color;
    outline-style: auto;
    outline-width: unset;
  }
}

.emotion-2 {
  background-color: var(--themeBgPrimary, #FFFFFF);
  border-radius: 6px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  overflow: auto;
  -ms-overflow-style: -ms-autohiding-scrollbar;
  border-width: 1px;
  border-color: var(--themeBorder, #DADDE2);
  border-style: solid;
  -webkit-transform: translateY(
      -9px
    );
  -moz-transform: translateY(
      -9px
    );
  -ms-transform: translateY(
      -9px
    );
  transform: translateY(
      -9px
    );
  overflow-x: hidden;
}

.emotion-3:focus {
  outline: none;
}

.emotion-4 {
  padding: 16px;
}

.emotion-5 {
  background-color: ;
  background-image: ;
  -webkit-background-position: ;
  background-position: ;
  background-repeat: no-repeat;
  -webkit-background-size: ;
  background-size: ;
  display: ;
  text-align: ;
  padding: 16px;
}

.emotion-6 {
  position: absolute;
  bottom: 4px;
  left: calc(50% - 5px);
  border-right: 1px solid var(--themeBorder, #DADDE2);
  border-bottom: 1px solid var(--themeBorder, #DADDE2);
  background-color: var(--themeBgPrimary, #FFFFFF);
  box-sizing: border-box;
  -webkit-transform: rotate(45deg);
  -moz-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  transform: rotate(45deg);
  height: 10px;
  width: 10px;
}

<Popover
  data-cy="popover"
  initialIsOpen={true}
  trigger="Dropdown trigger"
>
  <div
    className="emotion-0"
  >
    <Dropdownable
      dropdown={
        <Popover
          data-cy="popover"
          id="dropdown2"
          role="dialog"
          showPointerCaret={true}
        >
          <FocusLockCombination
            disabled={false}
          >
            .emotion-0:focus {
  outline: none;
}

<div
              className="emotion-0"
              tabIndex={-1}
            >
              <SpacingBox
                side="all"
                spacingSize="m"
                tag="div"
              >
                <div>
                  dropdown content
                </div>
              </SpacingBox>
            </div>
          </FocusLockCombination>
        </Popover>
      }
      isOpen={true}
      preferredDirections={
        Array [
          "bottom",
          "top",
          "top-start",
          "top-end",
          "bottom-start",
          "bottom-end",
        ]
      }
    >
      <div>
        <ResetButton
          aria-expanded={true}
          aria-owns="dropdown2"
          onBlur={[Function]}
          onClick={[Function]}
          onKeyDown={[Function]}
        >
          <button
            aria-expanded={true}
            aria-owns="dropdown2"
            className="emotion-1"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <div
              tabIndex={-1}
            >
              Dropdown trigger
            </div>
          </button>
        </ResetButton>
      </div>
      <clickOutside(DropdownContents)
        isOpen={true}
      >
        <DropdownContents
          isOpen={true}
        >
          <ForwardRef
            style={
              Object {
                "left": "0",
                "position": "absolute",
                "top": "0",
                "zIndex": 2,
              }
            }
          >
            <Overlay
              innerRef={[Function]}
              overlayRoot={
                .emotion-0 {
  background-color: var(--themeBgPrimary, #FFFFFF);
  border-radius: 6px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  overflow: auto;
  -ms-overflow-style: -ms-autohiding-scrollbar;
  border-width: 1px;
  border-color: var(--themeBorder, #DADDE2);
  border-style: solid;
  -webkit-transform: translateY(
      -9px
    );
  -moz-transform: translateY(
      -9px
    );
  -ms-transform: translateY(
      -9px
    );
  transform: translateY(
      -9px
    );
  overflow-x: hidden;
}

.emotion-1:focus {
  outline: none;
}

.emotion-2 {
  background-color: ;
  background-image: ;
  -webkit-background-position: ;
  background-position: ;
  background-repeat: no-repeat;
  -webkit-background-size: ;
  background-size: ;
  display: ;
  text-align: ;
  padding: 16px;
}

.emotion-3 {
  position: absolute;
  bottom: 4px;
  left: calc(50% - 5px);
  border-right: 1px solid var(--themeBorder, #DADDE2);
  border-bottom: 1px solid var(--themeBorder, #DADDE2);
  background-color: var(--themeBgPrimary, #FFFFFF);
  box-sizing: border-box;
  -webkit-transform: rotate(45deg);
  -moz-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  transform: rotate(45deg);
  height: 10px;
  width: 10px;
}

<body>
                  <div>
                    <div
                      style="z-index: 2; position: absolute; left: 0px; top: 0px;"
                    >
                      <div
                        class="emotion-0"
                        data-cy="popover"
                        id="dropdown2"
                        role="dialog"
                      >
                        <div
                          data-focus-guard="true"
                          style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
                          tabindex="0"
                        />
                        <div
                          data-focus-guard="true"
                          style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
                          tabindex="1"
                        />
                        <div
                          data-focus-lock-disabled="false"
                        >
                          <div
                            class="emotion-1"
                            tabindex="-1"
                          >
                            <div
                              class="emotion-2"
                              data-cy="spacingBox"
                            >
                              <div>
                                dropdown content
                              </div>
                            </div>
                          </div>
                        </div>
                        <div
                          data-focus-guard="true"
                          style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
                          tabindex="0"
                        />
                      </div>
                      <div
                        class="emotion-3"
                      />
                    </div>
                  </div>
                </body>
              }
              style={
                Object {
                  "left": "0",
                  "position": "absolute",
                  "top": "0",
                  "zIndex": 2,
                }
              }
            >
              <Portal
                containerInfo={
                  .emotion-0 {
  background-color: var(--themeBgPrimary, #FFFFFF);
  border-radius: 6px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  overflow: auto;
  -ms-overflow-style: -ms-autohiding-scrollbar;
  border-width: 1px;
  border-color: var(--themeBorder, #DADDE2);
  border-style: solid;
  -webkit-transform: translateY(
      -9px
    );
  -moz-transform: translateY(
      -9px
    );
  -ms-transform: translateY(
      -9px
    );
  transform: translateY(
      -9px
    );
  overflow-x: hidden;
}

.emotion-1:focus {
  outline: none;
}

.emotion-2 {
  background-color: ;
  background-image: ;
  -webkit-background-position: ;
  background-position: ;
  background-repeat: no-repeat;
  -webkit-background-size: ;
  background-size: ;
  display: ;
  text-align: ;
  padding: 16px;
}

.emotion-3 {
  position: absolute;
  bottom: 4px;
  left: calc(50% - 5px);
  border-right: 1px solid var(--themeBorder, #DADDE2);
  border-bottom: 1px solid var(--themeBorder, #DADDE2);
  background-color: var(--themeBgPrimary, #FFFFFF);
  box-sizing: border-box;
  -webkit-transform: rotate(45deg);
  -moz-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  transform: rotate(45deg);
  height: 10px;
  width: 10px;
}

<div>
                    <div
                      style="z-index: 2; position: absolute; left: 0px; top: 0px;"
                    >
                      <div
                        class="emotion-0"
                        data-cy="popover"
                        id="dropdown2"
                        role="dialog"
                      >
                        <div
                          data-focus-guard="true"
                          style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
                          tabindex="0"
                        />
                        <div
                          data-focus-guard="true"
                          style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
                          tabindex="1"
                        />
                        <div
                          data-focus-lock-disabled="false"
                        >
                          <div
                            class="emotion-1"
                            tabindex="-1"
                          >
                            <div
                              class="emotion-2"
                              data-cy="spacingBox"
                            >
                              <div>
                                dropdown content
                              </div>
                            </div>
                          </div>
                        </div>
                        <div
                          data-focus-guard="true"
                          style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
                          tabindex="0"
                        />
                      </div>
                      <div
                        class="emotion-3"
                      />
                    </div>
                  </div>
                }
              >
                <div
                  style={
                    Object {
                      "left": "0",
                      "position": "absolute",
                      "top": "0",
                      "zIndex": 2,
                    }
                  }
                >
                  <Popover
                    data-cy="popover"
                    id="dropdown2"
                    role="dialog"
                    showPointerCaret={true}
                  >
                    <div
                      className="emotion-2"
                      data-cy="popover"
                      id="dropdown2"
                      role="dialog"
                      style={
                        Object {
                          "maxHeight": undefined,
                          "maxWidth": undefined,
                          "width": undefined,
                        }
                      }
                    >
                      <FocusLockCombination
                        disabled={false}
                      >
                        <FocusLock
                          as="div"
                          autoFocus={true}
                          disabled={false}
                          lockProps={Object {}}
                          noFocusGuards={false}
                          persistentFocus={false}
                          returnFocus={false}
                          sideCar={[Function]}
                        >
                          <div
                            data-focus-guard={true}
                            key="guard-first"
                            style={
                              Object {
                                "height": "0px",
                                "left": "1px",
                                "overflow": "hidden",
                                "padding": 0,
                                "position": "fixed",
                                "top": "1px",
                                "width": "1px",
                              }
                            }
                            tabIndex={0}
                          />
                          <div
                            data-focus-guard={true}
                            key="guard-nearest"
                            style={
                              Object {
                                "height": "0px",
                                "left": "1px",
                                "overflow": "hidden",
                                "padding": 0,
                                "position": "fixed",
                                "top": "1px",
                                "width": "1px",
                              }
                            }
                            tabIndex={1}
                          />
                          <div
                            data-focus-lock-disabled={false}
                            onBlur={[Function]}
                            onFocus={[Function]}
                          >
                            <SideEffect(FocusWatcher)
                              autoFocus={true}
                              disabled={false}
                              observed={
                                .emotion-0:focus {
  outline: none;
}

.emotion-1 {
  background-color: ;
  background-image: ;
  -webkit-background-position: ;
  background-position: ;
  background-repeat: no-repeat;
  -webkit-background-size: ;
  background-size: ;
  display: ;
  text-align: ;
  padding: 16px;
}

<div
                                  data-focus-lock-disabled="false"
                                >
                                  <div
                                    class="emotion-0"
                                    tabindex="-1"
                                  >
                                    <div
                                      class="emotion-1"
                                      data-cy="spacingBox"
                                    >
                                      <div>
                                        dropdown content
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              }
                              onActivation={[Function]}
                              onDeactivation={[Function]}
                              persistentFocus={false}
                              returnFocus={[Function]}
                              shards={Array []}
                              sideCar={
                                Object {
                                  "assignMedium": [Function],
                                  "assignSyncMedium": [Function],
                                  "options": Object {
                                    "async": true,
                                    "ssr": false,
                                  },
                                  "read": [Function],
                                  "useMedium": [Function],
                                }
                              }
                            >
                              <FocusWatcher
                                autoFocus={true}
                                disabled={false}
                                observed={
                                  .emotion-0:focus {
  outline: none;
}

.emotion-1 {
  background-color: ;
  background-image: ;
  -webkit-background-position: ;
  background-position: ;
  background-repeat: no-repeat;
  -webkit-background-size: ;
  background-size: ;
  display: ;
  text-align: ;
  padding: 16px;
}

<div
                                    data-focus-lock-disabled="false"
                                  >
                                    <div
                                      class="emotion-0"
                                      tabindex="-1"
                                    >
                                      <div
                                        class="emotion-1"
                                        data-cy="spacingBox"
                                      >
                                        <div>
                                          dropdown content
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                }
                                onActivation={[Function]}
                                onDeactivation={[Function]}
                                persistentFocus={false}
                                returnFocus={[Function]}
                                shards={Array []}
                                sideCar={
                                  Object {
                                    "assignMedium": [Function],
                                    "assignSyncMedium": [Function],
                                    "options": Object {
                                      "async": true,
                                      "ssr": false,
                                    },
                                    "read": [Function],
                                    "useMedium": [Function],
                                  }
                                }
                              />
                            </SideEffect(FocusWatcher)>
                            <div
                              className="emotion-3"
                              tabIndex={-1}
                            >
                              <SpacingBox
                                side="all"
                                spacingSize="m"
                                tag="div"
                              >
                                <Box
                                  bgImageOptions={
                                    Object {
                                      "position": undefined,
                                      "repeat": undefined,
                                      "size": undefined,
                                    }
                                  }
                                  className="emotion-4"
                                  data-cy="spacingBox"
                                  tag="div"
                                >
                                  <div
                                    className="emotion-5"
                                    data-cy="spacingBox"
                                  >
                                    <div>
                                      dropdown content
                                    </div>
                                  </div>
                                </Box>
                              </SpacingBox>
                            </div>
                          </div>
                          <div
                            data-focus-guard={true}
                            style={
                              Object {
                                "height": "0px",
                                "left": "1px",
                                "overflow": "hidden",
                                "padding": 0,
                                "position": "fixed",
                                "top": "1px",
                                "width": "1px",
                              }
                            }
                            tabIndex={0}
                          />
                        </FocusLock>
                      </FocusLockCombination>
                    </div>
                    <div
                      className="emotion-6"
                    />
                  </Popover>
                </div>
              </Portal>
            </Overlay>
          </ForwardRef>
        </DropdownContents>
      </clickOutside(DropdownContents)>
    </Dropdownable>
  </div>
</Popover>
`;
