// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TextInput should display icon with tooltip if tooltipText is set 1`] = `
.emotion-0 {
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-1 {
  margin-left: 8px;
  margin-bottom: 4px;
}

<div>
  <div
    className="emotion-2"
  >
    <label
      className="emotion-0"
      htmlFor="input.with.tooltip"
    >
      Tooltip Message Test
    </label>
    <span
      className="emotion-1"
    >
      <Tooltip
        id="labelTooltip-input.with.tooltip"
        maxWidth={200}
        trigger={
          <Icon
            color="#AEB0B4"
            shape="system-circle-question"
            size="16px"
          />
        }
      >
        Example Tooltip
      </Tooltip>
    </span>
  </div>
  <FormFieldWrapper
    id="input.with.tooltip"
  >
    <Component />
  </FormFieldWrapper>
</div>
`;

exports[`TextInput should display validation message if set & appearance == Error 1`] = `
.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-0 {
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
  color: var(--themeError,#EB293A);
  fill: var(--themeError,#EB293A);
}

<div>
  <div
    className="emotion-1"
  >
    <label
      className="emotion-0"
      htmlFor="input.error.with.message"
    >
      Error Message Test
    </label>
  </div>
  <FormFieldWrapper
    errors={
      Array [
        "This is an error message",
        "this is a second error message",
      ]
    }
    id="input.error.with.message"
  >
    <Component />
  </FormFieldWrapper>
</div>
`;

exports[`TextInput should hide label if \`showInputLabel\` set to false 1`] = `
.emotion-0 {
  border: 0;
  -webkit-clip: rect(0 0 0 0);
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<div>
  <div
    className="emotion-1"
  >
    <label
      className="emotion-0"
    >
      I'm not displayed
    </label>
  </div>
  <FormFieldWrapper>
    <Component />
  </FormFieldWrapper>
</div>
`;

exports[`TextInput should not display validation message if set & appearance == Success 1`] = `
.emotion-0 {
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<div>
  <div
    className="emotion-1"
  >
    <label
      className="emotion-0"
      htmlFor="input.success.without.message"
    >
      No Error Message Test
    </label>
  </div>
  <FormFieldWrapper
    errors={
      Array [
        "This is an error message",
      ]
    }
    id="input.success.without.message"
  >
    <Component />
  </FormFieldWrapper>
</div>
`;

exports[`TextInput should render all appearances focus 1`] = `
.emotion-0 {
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-3 {
  -webkit-align-items: flex;
  -webkit-box-align: flex;
  -ms-flex-align: flex;
  align-items: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-2 {
  background: none;
  border: 0;
  box-shadow: none;
  padding: 0;
  padding-left: 16px;
  padding-right: 16px;
  box-sizing: border-box;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 0;
  width: auto;
  border: 1px solid;
  border-radius: 4px;
  color: inherit;
  height: 36px;
  font-size: inherit;
  padding-left: 16px;
  padding-right: 16px;
  background-color: var(--themeBgPrimary,#FFFFFF);
  border-color: var(--themeBorder,#DADDE2);
}

.emotion-2:focus {
  outline: 0;
}

.emotion-2::-webkit-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2::-moz-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2:-ms-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2::placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input {
  font-size: inherit;
  color: inherit;
}

.emotion-2 input::-webkit-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input::-moz-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input:-ms-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input::placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 svg {
  fill: var(--themeTextColorPrimary,#1B2029);
}

.emotion-2:focus {
  background-color: rgba(125,88,255,0.05);
  border-color: var(--themeBrandPrimary,#7D58FF);
}

.emotion-2:focus svg {
  fill: var(--themeBrandPrimary,#7D58FF);
}

<TextInput
  appearance="standard"
  id="test.input"
  showInputLabel={true}
  type="text"
>
  <div>
    <div
      className="emotion-1"
    >
      <label
        className="emotion-0"
        htmlFor="test.input"
      />
    </div>
    <FormFieldWrapper
      id="test.input"
    >
      <div>
        <div
          className="emotion-3"
        >
          <input
            aria-describedby=""
            aria-invalid={false}
            className="emotion-2"
            id="test.input"
            type="text"
          />
        </div>
        <div />
      </div>
    </FormFieldWrapper>
  </div>
</TextInput>
`;

exports[`TextInput should render all appearances focus 2`] = `
.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-0 {
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
  color: var(--themeError,#EB293A);
  fill: var(--themeError,#EB293A);
}

.emotion-3 {
  -webkit-align-items: flex;
  -webkit-box-align: flex;
  -ms-flex-align: flex;
  align-items: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-2 {
  background: none;
  border: 0;
  box-shadow: none;
  padding: 0;
  padding-left: 16px;
  padding-right: 16px;
  box-sizing: border-box;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 0;
  width: auto;
  border: 1px solid;
  border-radius: 4px;
  color: inherit;
  height: 36px;
  font-size: inherit;
  padding-left: 16px;
  padding-right: 16px;
  background-color: var(--themeBgPrimary,#FFFFFF);
  border-color: var(--themeError,#EB293A);
}

.emotion-2:focus {
  outline: 0;
}

.emotion-2::-webkit-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2::-moz-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2:-ms-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2::placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input {
  font-size: inherit;
  color: inherit;
}

.emotion-2 input::-webkit-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input::-moz-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input:-ms-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input::placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 svg {
  fill: var(--themeError,#EB293A);
}

.emotion-2:focus {
  background-color: rgba(235,41,58,0.05);
}

<TextInput
  appearance="error"
  id="test.input"
  showInputLabel={true}
  type="text"
>
  <div>
    <div
      className="emotion-1"
    >
      <label
        className="emotion-0"
        htmlFor="test.input"
      />
    </div>
    <FormFieldWrapper
      id="test.input"
    >
      <div>
        <div
          className="emotion-3"
        >
          <input
            aria-describedby=""
            aria-invalid={false}
            className="emotion-2"
            id="test.input"
            type="text"
          />
        </div>
        <div />
      </div>
    </FormFieldWrapper>
  </div>
</TextInput>
`;

exports[`TextInput should render all appearances focus 3`] = `
.emotion-0 {
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-3 {
  -webkit-align-items: flex;
  -webkit-box-align: flex;
  -ms-flex-align: flex;
  align-items: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-2 {
  background: none;
  border: 0;
  box-shadow: none;
  padding: 0;
  padding-left: 16px;
  padding-right: 16px;
  box-sizing: border-box;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 0;
  width: auto;
  border: 1px solid;
  border-radius: 4px;
  color: inherit;
  height: 36px;
  font-size: inherit;
  padding-left: 16px;
  padding-right: 16px;
  background-color: var(--themeBgPrimary,#FFFFFF);
  border-color: var(--themeSuccess,#14C684);
}

.emotion-2:focus {
  outline: 0;
}

.emotion-2::-webkit-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2::-moz-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2:-ms-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2::placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input {
  font-size: inherit;
  color: inherit;
}

.emotion-2 input::-webkit-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input::-moz-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input:-ms-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input::placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 svg {
  fill: var(--themeSuccess,#14C684);
}

.emotion-2:focus {
  background-color: rgba(20,198,132,0.05);
}

<TextInput
  appearance="success"
  id="test.input"
  showInputLabel={true}
  type="text"
>
  <div>
    <div
      className="emotion-1"
    >
      <label
        className="emotion-0"
        htmlFor="test.input"
      />
    </div>
    <FormFieldWrapper
      id="test.input"
    >
      <div>
        <div
          className="emotion-3"
        >
          <input
            aria-describedby=""
            aria-invalid={false}
            className="emotion-2"
            id="test.input"
            type="text"
          />
        </div>
        <div />
      </div>
    </FormFieldWrapper>
  </div>
</TextInput>
`;

exports[`TextInput should render all appearances with props 1`] = `
.emotion-0 {
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<div>
  <div
    className="emotion-1"
  >
    <label
      className="emotion-0"
      htmlFor="test.input.standard"
    >
      standard
    </label>
  </div>
  <FormFieldWrapper
    id="test.input.standard"
  >
    <Component />
  </FormFieldWrapper>
</div>
`;

exports[`TextInput should render all appearances with props 2`] = `
.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-0 {
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
  color: var(--themeError,#EB293A);
  fill: var(--themeError,#EB293A);
}

<div>
  <div
    className="emotion-1"
  >
    <label
      className="emotion-0"
      htmlFor="test.input.error"
    >
      error
    </label>
  </div>
  <FormFieldWrapper
    id="test.input.error"
  >
    <Component />
  </FormFieldWrapper>
</div>
`;

exports[`TextInput should render all appearances with props 3`] = `
.emotion-0 {
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<div>
  <div
    className="emotion-1"
  >
    <label
      className="emotion-0"
      htmlFor="test.input.success"
    >
      success
    </label>
  </div>
  <FormFieldWrapper
    id="test.input.success"
  >
    <Component />
  </FormFieldWrapper>
</div>
`;

exports[`TextInput should render node as inputLabel 1`] = `
.emotion-0 {
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<div>
  <div
    className="emotion-1"
  >
    <label
      className="emotion-0"
      htmlFor="test.input"
    >
      <span>
        My Test Node
      </span>
    </label>
  </div>
  <FormFieldWrapper
    id="test.input"
  >
    <Component />
  </FormFieldWrapper>
</div>
`;

exports[`TextInput should render string inputLabel 1`] = `
.emotion-0 {
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<div>
  <div
    className="emotion-1"
  >
    <label
      className="emotion-0"
      htmlFor="test.input"
    >
      Test Input
    </label>
  </div>
  <FormFieldWrapper
    id="test.input"
  >
    <Component />
  </FormFieldWrapper>
</div>
`;
