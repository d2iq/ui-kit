// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TextInputWithBadges renders badges with custom BadgeAppearance 1`] = `
.emotion-4 {
  cursor: pointer;
}

.emotion-8 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  padding-bottom: 4px;
  padding-top: 4px;
  padding-right: 8px;
}

.emotion-8,
.emotion-8 * {
  max-width: 100%;
}

.emotion-0 {
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-26 {
  height: auto;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  min-height: 0;
  border: 1px solid;
  border-radius: 4px;
  color: inherit;
  height: 36px;
  font-size: inherit;
  padding-left: 16px;
  padding-right: 16px;
  height: auto;
  min-height: 36px;
  padding-bottom: 4px;
  padding-top: 4px;
  background-color: var(--themeBgPrimary,#FFFFFF);
  border-color: var(--themeBorder,#DADDE2);
}

.emotion-26 > div {
  width: auto;
}

.emotion-26::-webkit-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26::-moz-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26:-ms-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26::placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26 input {
  font-size: inherit;
  color: inherit;
}

.emotion-26 input::-webkit-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26 input::-moz-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26 input:-ms-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26 input::placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26:focus {
  background-color: rgba(125,88,255,0.05);
  border-color: var(--themeBrandPrimary,#7D58FF);
}

.emotion-25 {
  background: none;
  border: 0;
  box-shadow: none;
  padding: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 50px;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  padding-bottom: 4px;
  padding-top: 4px;
  padding-right: 8px;
  box-sizing: border-box;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 0;
  width: auto;
}

.emotion-25:focus {
  outline: 0;
}

.emotion-25,
.emotion-25 * {
  max-width: 100%;
}

.emotion-1 {
  overflow: hidden;
  overflow: -moz-hidden-unscrollable;
  text-overflow: ellipsis;
  white-space: nowrap;
  white-space: nowrap;
}

.emotion-7 {
  background-color: #7D58FF;
  border-color: #7D58FF;
  color: #FFFFFF;
  box-sizing: border-box;
  border-width: 1px;
  border-style: solid;
  padding: 0 8px 0;
  font-size: 80%;
  line-height: 20px;
  -webkit-text-decoration: none;
  text-decoration: none;
  text-rendering: optimizeLegibility;
  border-radius: 4px;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.emotion-6 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  min-height: 0;
}

.emotion-6 > div {
  width: auto;
}

.emotion-6 > *:not(:first-child) {
  padding-left: 4px;
  padding-top: 0;
}

.emotion-2 {
  box-sizing: border-box;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 0;
  width: auto;
}

.emotion-5 {
  box-sizing: border-box;
  -webkit-flex-basis: auto;
  -ms-flex-preferred-size: auto;
  flex-basis: auto;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  width: initial;
}

.emotion-3 {
  vertical-align: middle;
  fill: currentColor;
}

.emotion-3 use {
  pointer-events: none;
}

<TextInputWithBadges
  addBadgeOnBlur={true}
  appearance="standard"
  badges={
    Array [
      Object {
        "label": "Badge one",
        "value": "badge-one",
      },
      Object {
        "label": "Badge two",
        "value": "badge-two",
      },
      Object {
        "label": "Badge three",
        "value": "badge-three",
      },
    ]
  }
  id="appearance"
  inputLabel="Appearance"
  showInputLabel={true}
  type="text"
>
  <div
    data-cy="textInput"
  >
    <label
      className="emotion-0"
      data-cy="textInput-label"
      htmlFor="appearance"
    >
      Appearance
    </label>
    <FormFieldWrapper
      id="appearance"
    >
      <div
        className="emotion-26"
      >
        <span
          className="emotion-8"
          key="badge-one-badgeWrapper"
        >
          <Badge
            appearance="primary"
          >
            <span
              className="emotion-7"
              data-cy="badge"
            >
              <Flex
                align="center"
                direction="row"
                gutterSize="xxs"
                justify="flex-start"
                wrap="nowrap"
              >
                <div
                  className="emotion-6"
                  data-cy="flex"
                >
                  <FlexItem
                    flex="grow"
                  >
                    <div
                      className="emotion-2"
                      data-cy="flexItem"
                    >
                      <div
                        className="emotion-1"
                      >
                        Badge one
                      </div>
                    </div>
                  </FlexItem>
                  <FlexItem
                    flex="shrink"
                  >
                    <div
                      className="emotion-5"
                      data-cy="flexItem"
                    >
                      <Clickable
                        action={[Function]}
                        disableFocusOutline={false}
                        role="button"
                        tabIndex={-1}
                      >
                        <span
                          className="emotion-4"
                          onClick={[Function]}
                          onKeyPress={[Function]}
                          role="button"
                          tabIndex={-1}
                        >
                          <Icon
                            shape="system-close"
                            size="12px"
                          >
                            <svg
                              aria-label="system-close icon"
                              className="emotion-3"
                              data-cy="icon"
                              height={12}
                              preserveAspectRatio="xMinYMin meet"
                              role="img"
                              viewBox="0 0 12 12"
                              width={12}
                            >
                              <use
                                xlinkHref="#system-close"
                              />
                            </svg>
                          </Icon>
                        </span>
                      </Clickable>
                    </div>
                  </FlexItem>
                </div>
              </Flex>
            </span>
          </Badge>
        </span>
        <span
          className="emotion-8"
          key="badge-two-badgeWrapper"
        >
          <Badge
            appearance="primary"
          >
            <span
              className="emotion-7"
              data-cy="badge"
            >
              <Flex
                align="center"
                direction="row"
                gutterSize="xxs"
                justify="flex-start"
                wrap="nowrap"
              >
                <div
                  className="emotion-6"
                  data-cy="flex"
                >
                  <FlexItem
                    flex="grow"
                  >
                    <div
                      className="emotion-2"
                      data-cy="flexItem"
                    >
                      <div
                        className="emotion-1"
                      >
                        Badge two
                      </div>
                    </div>
                  </FlexItem>
                  <FlexItem
                    flex="shrink"
                  >
                    <div
                      className="emotion-5"
                      data-cy="flexItem"
                    >
                      <Clickable
                        action={[Function]}
                        disableFocusOutline={false}
                        role="button"
                        tabIndex={-1}
                      >
                        <span
                          className="emotion-4"
                          onClick={[Function]}
                          onKeyPress={[Function]}
                          role="button"
                          tabIndex={-1}
                        >
                          <Icon
                            shape="system-close"
                            size="12px"
                          >
                            <svg
                              aria-label="system-close icon"
                              className="emotion-3"
                              data-cy="icon"
                              height={12}
                              preserveAspectRatio="xMinYMin meet"
                              role="img"
                              viewBox="0 0 12 12"
                              width={12}
                            >
                              <use
                                xlinkHref="#system-close"
                              />
                            </svg>
                          </Icon>
                        </span>
                      </Clickable>
                    </div>
                  </FlexItem>
                </div>
              </Flex>
            </span>
          </Badge>
        </span>
        <span
          className="emotion-8"
          key="badge-three-badgeWrapper"
        >
          <Badge
            appearance="primary"
          >
            <span
              className="emotion-7"
              data-cy="badge"
            >
              <Flex
                align="center"
                direction="row"
                gutterSize="xxs"
                justify="flex-start"
                wrap="nowrap"
              >
                <div
                  className="emotion-6"
                  data-cy="flex"
                >
                  <FlexItem
                    flex="grow"
                  >
                    <div
                      className="emotion-2"
                      data-cy="flexItem"
                    >
                      <div
                        className="emotion-1"
                      >
                        Badge three
                      </div>
                    </div>
                  </FlexItem>
                  <FlexItem
                    flex="shrink"
                  >
                    <div
                      className="emotion-5"
                      data-cy="flexItem"
                    >
                      <Clickable
                        action={[Function]}
                        disableFocusOutline={false}
                        role="button"
                        tabIndex={-1}
                      >
                        <span
                          className="emotion-4"
                          onClick={[Function]}
                          onKeyPress={[Function]}
                          role="button"
                          tabIndex={-1}
                        >
                          <Icon
                            shape="system-close"
                            size="12px"
                          >
                            <svg
                              aria-label="system-close icon"
                              className="emotion-3"
                              data-cy="icon"
                              height={12}
                              preserveAspectRatio="xMinYMin meet"
                              role="img"
                              viewBox="0 0 12 12"
                              width={12}
                            >
                              <use
                                xlinkHref="#system-close"
                              />
                            </svg>
                          </Icon>
                        </span>
                      </Clickable>
                    </div>
                  </FlexItem>
                </div>
              </Flex>
            </span>
          </Badge>
        </span>
        <input
          aria-describedby=""
          aria-invalid={false}
          className="emotion-25"
          data-cy="textInput-input"
          id="appearance"
          onBlur={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          type="text"
        />
      </div>
    </FormFieldWrapper>
  </div>
</TextInputWithBadges>
`;

exports[`TextInputWithBadges renders empty 1`] = `
.emotion-0 {
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-2 {
  height: auto;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  min-height: 0;
  border: 1px solid;
  border-radius: 4px;
  color: inherit;
  height: 36px;
  font-size: inherit;
  padding-left: 16px;
  padding-right: 16px;
  height: auto;
  min-height: 36px;
  padding-bottom: 4px;
  padding-top: 4px;
  background-color: var(--themeBgPrimary,#FFFFFF);
  border-color: var(--themeBorder,#DADDE2);
}

.emotion-2 > div {
  width: auto;
}

.emotion-2::-webkit-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2::-moz-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2:-ms-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2::placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input {
  font-size: inherit;
  color: inherit;
}

.emotion-2 input::-webkit-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input::-moz-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input:-ms-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2 input::placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-2:focus {
  background-color: rgba(125,88,255,0.05);
  border-color: var(--themeBrandPrimary,#7D58FF);
}

.emotion-1 {
  background: none;
  border: 0;
  box-shadow: none;
  padding: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 50px;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  padding-bottom: 4px;
  padding-top: 4px;
  padding-right: 8px;
  box-sizing: border-box;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 0;
  width: auto;
}

.emotion-1:focus {
  outline: 0;
}

.emotion-1,
.emotion-1 * {
  max-width: 100%;
}

<TextInputWithBadges
  addBadgeOnBlur={true}
  appearance="standard"
  id="empty"
  inputLabel="empty"
  showInputLabel={true}
  type="text"
>
  <div
    data-cy="textInput"
  >
    <label
      className="emotion-0"
      data-cy="textInput-label"
      htmlFor="empty"
    >
      empty
    </label>
    <FormFieldWrapper
      id="empty"
    >
      <div
        className="emotion-2"
      >
        <input
          aria-describedby=""
          aria-invalid={false}
          className="emotion-1"
          data-cy="textInput-input"
          id="empty"
          onBlur={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          type="text"
        />
      </div>
    </FormFieldWrapper>
  </div>
</TextInputWithBadges>
`;

exports[`TextInputWithBadges renders with badges 1`] = `
.emotion-4 {
  cursor: pointer;
}

.emotion-8 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  padding-bottom: 4px;
  padding-top: 4px;
  padding-right: 8px;
}

.emotion-8,
.emotion-8 * {
  max-width: 100%;
}

.emotion-0 {
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-26 {
  height: auto;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  min-height: 0;
  border: 1px solid;
  border-radius: 4px;
  color: inherit;
  height: 36px;
  font-size: inherit;
  padding-left: 16px;
  padding-right: 16px;
  height: auto;
  min-height: 36px;
  padding-bottom: 4px;
  padding-top: 4px;
  background-color: var(--themeBgPrimary,#FFFFFF);
  border-color: var(--themeBorder,#DADDE2);
}

.emotion-26 > div {
  width: auto;
}

.emotion-26::-webkit-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26::-moz-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26:-ms-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26::placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26 input {
  font-size: inherit;
  color: inherit;
}

.emotion-26 input::-webkit-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26 input::-moz-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26 input:-ms-input-placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26 input::placeholder {
  color: var(--themeTextColorPrimary,#1B2029);
  opacity: 0.4;
}

.emotion-26:focus {
  background-color: rgba(125,88,255,0.05);
  border-color: var(--themeBrandPrimary,#7D58FF);
}

.emotion-25 {
  background: none;
  border: 0;
  box-shadow: none;
  padding: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 50px;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  padding-bottom: 4px;
  padding-top: 4px;
  padding-right: 8px;
  box-sizing: border-box;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 0;
  width: auto;
}

.emotion-25:focus {
  outline: 0;
}

.emotion-25,
.emotion-25 * {
  max-width: 100%;
}

.emotion-1 {
  overflow: hidden;
  overflow: -moz-hidden-unscrollable;
  text-overflow: ellipsis;
  white-space: nowrap;
  white-space: nowrap;
}

.emotion-7 {
  background-color: #7D58FF;
  border-color: #7D58FF;
  color: #FFFFFF;
  box-sizing: border-box;
  border-width: 1px;
  border-style: solid;
  padding: 0 8px 0;
  font-size: 80%;
  line-height: 20px;
  -webkit-text-decoration: none;
  text-decoration: none;
  text-rendering: optimizeLegibility;
  border-radius: 4px;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.emotion-6 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  min-height: 0;
}

.emotion-6 > div {
  width: auto;
}

.emotion-6 > *:not(:first-child) {
  padding-left: 4px;
  padding-top: 0;
}

.emotion-2 {
  box-sizing: border-box;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 0;
  width: auto;
}

.emotion-5 {
  box-sizing: border-box;
  -webkit-flex-basis: auto;
  -ms-flex-preferred-size: auto;
  flex-basis: auto;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  width: initial;
}

.emotion-3 {
  vertical-align: middle;
  fill: currentColor;
}

.emotion-3 use {
  pointer-events: none;
}

<TextInputWithBadges
  addBadgeOnBlur={true}
  appearance="standard"
  badges={
    Array [
      Object {
        "label": "Badge one",
        "value": "badge-one",
      },
      Object {
        "label": "Badge two",
        "value": "badge-two",
      },
      Object {
        "label": "Badge three",
        "value": "badge-three",
      },
    ]
  }
  id="withBadges"
  inputLabel="With badges"
  showInputLabel={true}
  type="text"
>
  <div
    data-cy="textInput"
  >
    <label
      className="emotion-0"
      data-cy="textInput-label"
      htmlFor="withBadges"
    >
      With badges
    </label>
    <FormFieldWrapper
      id="withBadges"
    >
      <div
        className="emotion-26"
      >
        <span
          className="emotion-8"
          key="badge-one-badgeWrapper"
        >
          <Badge
            appearance="primary"
          >
            <span
              className="emotion-7"
              data-cy="badge"
            >
              <Flex
                align="center"
                direction="row"
                gutterSize="xxs"
                justify="flex-start"
                wrap="nowrap"
              >
                <div
                  className="emotion-6"
                  data-cy="flex"
                >
                  <FlexItem
                    flex="grow"
                  >
                    <div
                      className="emotion-2"
                      data-cy="flexItem"
                    >
                      <div
                        className="emotion-1"
                      >
                        Badge one
                      </div>
                    </div>
                  </FlexItem>
                  <FlexItem
                    flex="shrink"
                  >
                    <div
                      className="emotion-5"
                      data-cy="flexItem"
                    >
                      <Clickable
                        action={[Function]}
                        disableFocusOutline={false}
                        role="button"
                        tabIndex={-1}
                      >
                        <span
                          className="emotion-4"
                          onClick={[Function]}
                          onKeyPress={[Function]}
                          role="button"
                          tabIndex={-1}
                        >
                          <Icon
                            shape="system-close"
                            size="12px"
                          >
                            <svg
                              aria-label="system-close icon"
                              className="emotion-3"
                              data-cy="icon"
                              height={12}
                              preserveAspectRatio="xMinYMin meet"
                              role="img"
                              viewBox="0 0 12 12"
                              width={12}
                            >
                              <use
                                xlinkHref="#system-close"
                              />
                            </svg>
                          </Icon>
                        </span>
                      </Clickable>
                    </div>
                  </FlexItem>
                </div>
              </Flex>
            </span>
          </Badge>
        </span>
        <span
          className="emotion-8"
          key="badge-two-badgeWrapper"
        >
          <Badge
            appearance="primary"
          >
            <span
              className="emotion-7"
              data-cy="badge"
            >
              <Flex
                align="center"
                direction="row"
                gutterSize="xxs"
                justify="flex-start"
                wrap="nowrap"
              >
                <div
                  className="emotion-6"
                  data-cy="flex"
                >
                  <FlexItem
                    flex="grow"
                  >
                    <div
                      className="emotion-2"
                      data-cy="flexItem"
                    >
                      <div
                        className="emotion-1"
                      >
                        Badge two
                      </div>
                    </div>
                  </FlexItem>
                  <FlexItem
                    flex="shrink"
                  >
                    <div
                      className="emotion-5"
                      data-cy="flexItem"
                    >
                      <Clickable
                        action={[Function]}
                        disableFocusOutline={false}
                        role="button"
                        tabIndex={-1}
                      >
                        <span
                          className="emotion-4"
                          onClick={[Function]}
                          onKeyPress={[Function]}
                          role="button"
                          tabIndex={-1}
                        >
                          <Icon
                            shape="system-close"
                            size="12px"
                          >
                            <svg
                              aria-label="system-close icon"
                              className="emotion-3"
                              data-cy="icon"
                              height={12}
                              preserveAspectRatio="xMinYMin meet"
                              role="img"
                              viewBox="0 0 12 12"
                              width={12}
                            >
                              <use
                                xlinkHref="#system-close"
                              />
                            </svg>
                          </Icon>
                        </span>
                      </Clickable>
                    </div>
                  </FlexItem>
                </div>
              </Flex>
            </span>
          </Badge>
        </span>
        <span
          className="emotion-8"
          key="badge-three-badgeWrapper"
        >
          <Badge
            appearance="primary"
          >
            <span
              className="emotion-7"
              data-cy="badge"
            >
              <Flex
                align="center"
                direction="row"
                gutterSize="xxs"
                justify="flex-start"
                wrap="nowrap"
              >
                <div
                  className="emotion-6"
                  data-cy="flex"
                >
                  <FlexItem
                    flex="grow"
                  >
                    <div
                      className="emotion-2"
                      data-cy="flexItem"
                    >
                      <div
                        className="emotion-1"
                      >
                        Badge three
                      </div>
                    </div>
                  </FlexItem>
                  <FlexItem
                    flex="shrink"
                  >
                    <div
                      className="emotion-5"
                      data-cy="flexItem"
                    >
                      <Clickable
                        action={[Function]}
                        disableFocusOutline={false}
                        role="button"
                        tabIndex={-1}
                      >
                        <span
                          className="emotion-4"
                          onClick={[Function]}
                          onKeyPress={[Function]}
                          role="button"
                          tabIndex={-1}
                        >
                          <Icon
                            shape="system-close"
                            size="12px"
                          >
                            <svg
                              aria-label="system-close icon"
                              className="emotion-3"
                              data-cy="icon"
                              height={12}
                              preserveAspectRatio="xMinYMin meet"
                              role="img"
                              viewBox="0 0 12 12"
                              width={12}
                            >
                              <use
                                xlinkHref="#system-close"
                              />
                            </svg>
                          </Icon>
                        </span>
                      </Clickable>
                    </div>
                  </FlexItem>
                </div>
              </Flex>
            </span>
          </Badge>
        </span>
        <input
          aria-describedby=""
          aria-invalid={false}
          className="emotion-25"
          data-cy="textInput-input"
          id="withBadges"
          onBlur={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          type="text"
        />
      </div>
    </FormFieldWrapper>
  </div>
</TextInputWithBadges>
`;
