// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ToggleInputList renders as a radio group 1`] = `
.emotion-0 {
  border: 0;
  margin: 0;
  padding: 0;
}

.emotion-1 {
  padding: 0;
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-2 {
  list-style: none;
  margin-left: 0;
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 0;
}

.emotion-3 {
  padding-top: 8px;
}

.emotion-4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
}

.emotion-5 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: auto;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  min-height: 0;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin-bottom: 0!important;
}

.emotion-5>div {
  width: auto;
}

.emotion-6 {
  box-sizing: border-box;
  -webkit-flex-basis: auto;
  -ms-flex-preferred-size: auto;
  flex-basis: auto;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  width: initial;
  display: inherit;
}

.emotion-7 {
  border-color: var(--themeBorder, #DADDE2);
  background-color: var(--themeBgPrimary, #FFFFFF);
  border-style: solid;
  border-width: 1px;
  height: 14px;
  width: 14px;
  border-radius: 999px;
  position: relative;
}

.emotion-8 {
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}

.emotion-9 {
  box-sizing: border-box;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 0;
  width: auto;
  padding-left: 12px;
}

<ToggleInputList
  id="radio"
  isRadioGroup={true}
  items={
    Array [
      Object {
        "id": "id.1",
        "inputLabel": "Sample label",
        "value": "value.1",
      },
      Object {
        "id": "id.2",
        "inputLabel": "Sample label",
        "value": "value.2",
      },
      Object {
        "id": "id.3",
        "inputLabel": "Sample label",
        "value": "value.3",
      },
    ]
  }
  labelAppearance="standard"
  listLabel="Sample legend"
  selectedItems={Array []}
  showListLabel={true}
  vertAlign="center"
>
  <FormFieldWrapper
    id="radio"
  >
    <fieldset
      aria-describedby=""
      aria-invalid={false}
      className="emotion-0"
      role="listbox"
    >
      <legend
        className="emotion-1"
      >
        Sample legend
      </legend>
      <ul
        className="emotion-2"
      >
        <li
          className="emotion-3"
          key="id.1"
        >
          <RadioInput
            checked={false}
            id="id.1"
            inputLabel="Sample label"
            name="radio"
            onChange={[Function]}
            value="value.1"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.1"
              inputLabel="Sample label"
              inputType="radio"
              name="radio"
              onChange={[Function]}
              showInputLabel={true}
              value="value.1"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.1"
              >
                <div
                  className="emotion-4"
                  data-cy="radioInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.1"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="radioInput-input"
                          id="id.1"
                          name="radio"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="radio"
                          value="value.1"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-9"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </RadioInput>
        </li>
        <li
          className="emotion-3"
          key="id.2"
        >
          <RadioInput
            checked={false}
            id="id.2"
            inputLabel="Sample label"
            name="radio"
            onChange={[Function]}
            value="value.2"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.2"
              inputLabel="Sample label"
              inputType="radio"
              name="radio"
              onChange={[Function]}
              showInputLabel={true}
              value="value.2"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.2"
              >
                <div
                  className="emotion-4"
                  data-cy="radioInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.2"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="radioInput-input"
                          id="id.2"
                          name="radio"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="radio"
                          value="value.2"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-9"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </RadioInput>
        </li>
        <li
          className="emotion-3"
          key="id.3"
        >
          <RadioInput
            checked={false}
            id="id.3"
            inputLabel="Sample label"
            name="radio"
            onChange={[Function]}
            value="value.3"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.3"
              inputLabel="Sample label"
              inputType="radio"
              name="radio"
              onChange={[Function]}
              showInputLabel={true}
              value="value.3"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.3"
              >
                <div
                  className="emotion-4"
                  data-cy="radioInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.3"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="radioInput-input"
                          id="id.3"
                          name="radio"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="radio"
                          value="value.3"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-9"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </RadioInput>
        </li>
      </ul>
    </fieldset>
  </FormFieldWrapper>
</ToggleInputList>
`;

exports[`ToggleInputList renders default 1`] = `
.emotion-0 {
  border: 0;
  margin: 0;
  padding: 0;
}

.emotion-1 {
  padding: 0;
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-2 {
  list-style: none;
  margin-left: 0;
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 0;
}

.emotion-3 {
  padding-top: 8px;
}

.emotion-4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
}

.emotion-5 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: auto;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  min-height: 0;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin-bottom: 0!important;
}

.emotion-5>div {
  width: auto;
}

.emotion-6 {
  box-sizing: border-box;
  -webkit-flex-basis: auto;
  -ms-flex-preferred-size: auto;
  flex-basis: auto;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  width: initial;
  display: inherit;
}

.emotion-7 {
  border-color: var(--themeBorder, #DADDE2);
  background-color: var(--themeBgPrimary, #FFFFFF);
  border-style: solid;
  border-width: 1px;
  height: 14px;
  width: 14px;
  border-radius: 4px;
  position: relative;
}

.emotion-8 {
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}

.emotion-9 {
  box-sizing: border-box;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 0;
  width: auto;
  padding-left: 12px;
}

<ToggleInputList
  id="checkbox"
  items={
    Array [
      Object {
        "id": "id.1",
        "inputLabel": "Sample label",
        "value": "value.1",
      },
      Object {
        "id": "id.2",
        "inputLabel": "Sample label",
        "value": "value.2",
      },
      Object {
        "id": "id.3",
        "inputLabel": "Sample label",
        "value": "value.3",
      },
    ]
  }
  labelAppearance="standard"
  listLabel="Sample legend"
  selectedItems={Array []}
  showListLabel={true}
  vertAlign="center"
>
  <FormFieldWrapper
    id="checkbox"
  >
    <fieldset
      aria-describedby=""
      aria-invalid={false}
      className="emotion-0"
      role="listbox"
    >
      <legend
        className="emotion-1"
      >
        Sample legend
      </legend>
      <ul
        className="emotion-2"
      >
        <li
          className="emotion-3"
          key="id.1"
        >
          <CheckboxInput
            checked={false}
            id="id.1"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.1"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.1"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.1"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.1"
              >
                <div
                  className="emotion-4"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.1"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="checkboxInput-input"
                          id="id.1"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.1"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-9"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
        <li
          className="emotion-3"
          key="id.2"
        >
          <CheckboxInput
            checked={false}
            id="id.2"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.2"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.2"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.2"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.2"
              >
                <div
                  className="emotion-4"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.2"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="checkboxInput-input"
                          id="id.2"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.2"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-9"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
        <li
          className="emotion-3"
          key="id.3"
        >
          <CheckboxInput
            checked={false}
            id="id.3"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.3"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.3"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.3"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.3"
              >
                <div
                  className="emotion-4"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.3"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="checkboxInput-input"
                          id="id.3"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.3"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-9"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
      </ul>
    </fieldset>
  </FormFieldWrapper>
</ToggleInputList>
`;

exports[`ToggleInputList renders with error label appearance 1`] = `
.emotion-0 {
  border: 0;
  margin: 0;
  padding: 0;
}

.emotion-1 {
  padding: 0;
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
  color: var(--themeError, #EB293A);
  fill: var(--themeError, #EB293A);
}

.emotion-2 {
  list-style: none;
  margin-left: 0;
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 0;
}

.emotion-3 {
  padding-top: 8px;
}

.emotion-4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
}

.emotion-5 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: auto;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  min-height: 0;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin-bottom: 0!important;
}

.emotion-5>div {
  width: auto;
}

.emotion-6 {
  box-sizing: border-box;
  -webkit-flex-basis: auto;
  -ms-flex-preferred-size: auto;
  flex-basis: auto;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  width: initial;
  display: inherit;
}

.emotion-7 {
  border-color: var(--themeBorder, #DADDE2);
  background-color: var(--themeBgPrimary, #FFFFFF);
  border-style: solid;
  border-width: 1px;
  height: 14px;
  width: 14px;
  border-radius: 4px;
  position: relative;
}

.emotion-8 {
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}

.emotion-9 {
  box-sizing: border-box;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 0;
  width: auto;
  padding-left: 12px;
}

.emotion-24 {
  padding: 0;
  margin: 0;
  font-size: 12px;
  color: var(--themeError, #EB293A);
  fill: var(--themeError, #EB293A);
}

.emotion-25 {
  text-indent: 0;
  list-style-type: none;
  padding-top: 4px;
}

<ToggleInputList
  errors={
    Array [
      "error.1",
      "error.2",
    ]
  }
  id="checkbox"
  items={
    Array [
      Object {
        "id": "id.1",
        "inputLabel": "Sample label",
        "value": "value.1",
      },
      Object {
        "id": "id.2",
        "inputLabel": "Sample label",
        "value": "value.2",
      },
      Object {
        "id": "id.3",
        "inputLabel": "Sample label",
        "value": "value.3",
      },
    ]
  }
  labelAppearance="error"
  listLabel="Sample legend"
  selectedItems={Array []}
  showListLabel={true}
  vertAlign="center"
>
  <FormFieldWrapper
    errors={
      Array [
        "error.1",
        "error.2",
      ]
    }
    id="checkbox"
  >
    <fieldset
      aria-describedby="checkbox-errorMsg0 checkbox-errorMsg1"
      aria-invalid={true}
      className="emotion-0"
      role="listbox"
    >
      <legend
        className="emotion-1"
      >
        Sample legend
      </legend>
      <ul
        className="emotion-2"
      >
        <li
          className="emotion-3"
          key="id.1"
        >
          <CheckboxInput
            checked={false}
            id="id.1"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.1"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.1"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.1"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.1"
              >
                <div
                  className="emotion-4"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.1"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="checkboxInput-input"
                          id="id.1"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.1"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-9"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
        <li
          className="emotion-3"
          key="id.2"
        >
          <CheckboxInput
            checked={false}
            id="id.2"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.2"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.2"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.2"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.2"
              >
                <div
                  className="emotion-4"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.2"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="checkboxInput-input"
                          id="id.2"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.2"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-9"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
        <li
          className="emotion-3"
          key="id.3"
        >
          <CheckboxInput
            checked={false}
            id="id.3"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.3"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.3"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.3"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.3"
              >
                <div
                  className="emotion-4"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.3"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="checkboxInput-input"
                          id="id.3"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.3"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-9"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
      </ul>
      <ul
        className="emotion-24"
      >
        <li
          className="emotion-25"
          id="checkbox-errorMsg0"
          key="0"
        >
          error.1
        </li>
        <li
          className="emotion-25"
          id="checkbox-errorMsg1"
          key="1"
        >
          error.2
        </li>
      </ul>
    </fieldset>
  </FormFieldWrapper>
</ToggleInputList>
`;

exports[`ToggleInputList renders with errors 1`] = `
.emotion-0 {
  border: 0;
  margin: 0;
  padding: 0;
}

.emotion-1 {
  padding: 0;
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-2 {
  list-style: none;
  margin-left: 0;
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 0;
}

.emotion-3 {
  padding-top: 8px;
}

.emotion-4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
}

.emotion-5 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: auto;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  min-height: 0;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin-bottom: 0!important;
}

.emotion-5>div {
  width: auto;
}

.emotion-6 {
  box-sizing: border-box;
  -webkit-flex-basis: auto;
  -ms-flex-preferred-size: auto;
  flex-basis: auto;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  width: initial;
  display: inherit;
}

.emotion-7 {
  border-color: var(--themeBorder, #DADDE2);
  background-color: var(--themeBgPrimary, #FFFFFF);
  border-style: solid;
  border-width: 1px;
  height: 14px;
  width: 14px;
  border-radius: 4px;
  position: relative;
}

.emotion-8 {
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}

.emotion-9 {
  box-sizing: border-box;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 0;
  width: auto;
  padding-left: 12px;
}

.emotion-24 {
  padding: 0;
  margin: 0;
  font-size: 12px;
  color: var(--themeError, #EB293A);
  fill: var(--themeError, #EB293A);
}

.emotion-25 {
  text-indent: 0;
  list-style-type: none;
  padding-top: 4px;
}

<ToggleInputList
  errors={
    Array [
      "error.1",
      "error.2",
    ]
  }
  id="checkbox"
  items={
    Array [
      Object {
        "id": "id.1",
        "inputLabel": "Sample label",
        "value": "value.1",
      },
      Object {
        "id": "id.2",
        "inputLabel": "Sample label",
        "value": "value.2",
      },
      Object {
        "id": "id.3",
        "inputLabel": "Sample label",
        "value": "value.3",
      },
    ]
  }
  labelAppearance="standard"
  listLabel="Sample legend"
  selectedItems={Array []}
  showListLabel={true}
  vertAlign="center"
>
  <FormFieldWrapper
    errors={
      Array [
        "error.1",
        "error.2",
      ]
    }
    id="checkbox"
  >
    <fieldset
      aria-describedby="checkbox-errorMsg0 checkbox-errorMsg1"
      aria-invalid={true}
      className="emotion-0"
      role="listbox"
    >
      <legend
        className="emotion-1"
      >
        Sample legend
      </legend>
      <ul
        className="emotion-2"
      >
        <li
          className="emotion-3"
          key="id.1"
        >
          <CheckboxInput
            checked={false}
            id="id.1"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.1"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.1"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.1"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.1"
              >
                <div
                  className="emotion-4"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.1"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="checkboxInput-input"
                          id="id.1"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.1"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-9"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
        <li
          className="emotion-3"
          key="id.2"
        >
          <CheckboxInput
            checked={false}
            id="id.2"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.2"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.2"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.2"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.2"
              >
                <div
                  className="emotion-4"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.2"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="checkboxInput-input"
                          id="id.2"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.2"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-9"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
        <li
          className="emotion-3"
          key="id.3"
        >
          <CheckboxInput
            checked={false}
            id="id.3"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.3"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.3"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.3"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.3"
              >
                <div
                  className="emotion-4"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.3"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="checkboxInput-input"
                          id="id.3"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.3"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-9"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
      </ul>
      <ul
        className="emotion-24"
      >
        <li
          className="emotion-25"
          id="checkbox-errorMsg0"
          key="0"
        >
          error.1
        </li>
        <li
          className="emotion-25"
          id="checkbox-errorMsg1"
          key="1"
        >
          error.2
        </li>
      </ul>
    </fieldset>
  </FormFieldWrapper>
</ToggleInputList>
`;

exports[`ToggleInputList renders with hidden label 1`] = `
.emotion-0 {
  border: 0;
  margin: 0;
  padding: 0;
}

.emotion-1 {
  padding: 0;
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}

.emotion-2 {
  list-style: none;
  margin-left: 0;
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 0;
}

.emotion-3 {
  padding-top: 8px;
}

.emotion-4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
}

.emotion-5 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: auto;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  min-height: 0;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin-bottom: 0!important;
}

.emotion-5>div {
  width: auto;
}

.emotion-6 {
  box-sizing: border-box;
  -webkit-flex-basis: auto;
  -ms-flex-preferred-size: auto;
  flex-basis: auto;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  width: initial;
  display: inherit;
}

.emotion-7 {
  border-color: var(--themeBorder, #DADDE2);
  background-color: var(--themeBgPrimary, #FFFFFF);
  border-style: solid;
  border-width: 1px;
  height: 14px;
  width: 14px;
  border-radius: 4px;
  position: relative;
}

.emotion-8 {
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}

.emotion-9 {
  box-sizing: border-box;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 0;
  width: auto;
  padding-left: 12px;
}

<ToggleInputList
  id="checkbox"
  items={
    Array [
      Object {
        "id": "id.1",
        "inputLabel": "Sample label",
        "value": "value.1",
      },
      Object {
        "id": "id.2",
        "inputLabel": "Sample label",
        "value": "value.2",
      },
      Object {
        "id": "id.3",
        "inputLabel": "Sample label",
        "value": "value.3",
      },
    ]
  }
  labelAppearance="standard"
  listLabel="Sample legend"
  selectedItems={Array []}
  showListLabel={false}
  vertAlign="center"
>
  <FormFieldWrapper
    id="checkbox"
  >
    <fieldset
      aria-describedby=""
      aria-invalid={false}
      className="emotion-0"
      role="listbox"
    >
      <legend
        className="emotion-1"
      >
        Sample legend
      </legend>
      <ul
        className="emotion-2"
      >
        <li
          className="emotion-3"
          key="id.1"
        >
          <CheckboxInput
            checked={false}
            id="id.1"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.1"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.1"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.1"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.1"
              >
                <div
                  className="emotion-4"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.1"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="checkboxInput-input"
                          id="id.1"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.1"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-9"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
        <li
          className="emotion-3"
          key="id.2"
        >
          <CheckboxInput
            checked={false}
            id="id.2"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.2"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.2"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.2"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.2"
              >
                <div
                  className="emotion-4"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.2"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="checkboxInput-input"
                          id="id.2"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.2"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-9"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
        <li
          className="emotion-3"
          key="id.3"
        >
          <CheckboxInput
            checked={false}
            id="id.3"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.3"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.3"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.3"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.3"
              >
                <div
                  className="emotion-4"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.3"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="checkboxInput-input"
                          id="id.3"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.3"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-9"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
      </ul>
    </fieldset>
  </FormFieldWrapper>
</ToggleInputList>
`;

exports[`ToggleInputList renders with required 1`] = `
.emotion-0 {
  border: 0;
  margin: 0;
  padding: 0;
}

.emotion-1 {
  padding: 0;
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-2 {
  line-height: 1.4;
  font-weight: 400;
  font-size: 14px;
  color: var(--themeError, #EB293A);
  fill: var(--themeError, #EB293A);
  text-align: inherit;
}

.emotion-3 {
  list-style: none;
  margin-left: 0;
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 0;
}

.emotion-4 {
  padding-top: 8px;
}

.emotion-5 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
}

.emotion-6 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: auto;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  min-height: 0;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin-bottom: 0!important;
}

.emotion-6>div {
  width: auto;
}

.emotion-7 {
  box-sizing: border-box;
  -webkit-flex-basis: auto;
  -ms-flex-preferred-size: auto;
  flex-basis: auto;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  width: initial;
  display: inherit;
}

.emotion-8 {
  border-color: var(--themeBorder, #DADDE2);
  background-color: var(--themeBgPrimary, #FFFFFF);
  border-style: solid;
  border-width: 1px;
  height: 14px;
  width: 14px;
  border-radius: 4px;
  position: relative;
}

.emotion-9 {
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}

.emotion-10 {
  box-sizing: border-box;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 0;
  width: auto;
  padding-left: 12px;
}

<ToggleInputList
  id="checkbox"
  items={
    Array [
      Object {
        "id": "id.1",
        "inputLabel": "Sample label",
        "value": "value.1",
      },
      Object {
        "id": "id.2",
        "inputLabel": "Sample label",
        "value": "value.2",
      },
      Object {
        "id": "id.3",
        "inputLabel": "Sample label",
        "value": "value.3",
      },
    ]
  }
  labelAppearance="standard"
  listLabel="Sample legend"
  required={true}
  selectedItems={Array []}
  showListLabel={true}
  vertAlign="center"
>
  <FormFieldWrapper
    id="checkbox"
  >
    <fieldset
      aria-describedby=""
      aria-invalid={false}
      aria-required={true}
      className="emotion-0"
      role="listbox"
    >
      <legend
        className="emotion-1"
      >
        Sample legend
        <DangerText
          align="inherit"
          size="m"
          tag="span"
          weight="normal"
          wrap="wrap"
        >
          <Text
            align="inherit"
            color="var(--themeError, #EB293A)"
            data-cy="dangerText"
            size="m"
            tag="span"
            weight="normal"
            wrap="wrap"
          >
            <span
              className="rmTextMargins emotion-2"
              data-cy="dangerText"
            >
               *
            </span>
          </Text>
        </DangerText>
      </legend>
      <ul
        className="emotion-3"
      >
        <li
          className="emotion-4"
          key="id.1"
        >
          <CheckboxInput
            checked={false}
            id="id.1"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.1"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.1"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.1"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.1"
              >
                <div
                  className="emotion-5"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-6"
                    htmlFor="id.1"
                  >
                    <div
                      className="emotion-7"
                    >
                      <div
                        className="emotion-8"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-9"
                          data-cy="checkboxInput-input"
                          id="id.1"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.1"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-10"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
        <li
          className="emotion-4"
          key="id.2"
        >
          <CheckboxInput
            checked={false}
            id="id.2"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.2"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.2"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.2"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.2"
              >
                <div
                  className="emotion-5"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-6"
                    htmlFor="id.2"
                  >
                    <div
                      className="emotion-7"
                    >
                      <div
                        className="emotion-8"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-9"
                          data-cy="checkboxInput-input"
                          id="id.2"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.2"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-10"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
        <li
          className="emotion-4"
          key="id.3"
        >
          <CheckboxInput
            checked={false}
            id="id.3"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.3"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.3"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.3"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.3"
              >
                <div
                  className="emotion-5"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-6"
                    htmlFor="id.3"
                  >
                    <div
                      className="emotion-7"
                    >
                      <div
                        className="emotion-8"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-9"
                          data-cy="checkboxInput-input"
                          id="id.3"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.3"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-10"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
      </ul>
    </fieldset>
  </FormFieldWrapper>
</ToggleInputList>
`;

exports[`ToggleInputList renders with selected items 1`] = `
.emotion-0 {
  border: 0;
  margin: 0;
  padding: 0;
}

.emotion-1 {
  padding: 0;
  display: block;
  padding-top: 0;
  margin-top: 0;
  margin-bottom: 4px;
  font-weight: 500;
}

.emotion-2 {
  list-style: none;
  margin-left: 0;
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 0;
}

.emotion-3 {
  padding-top: 8px;
}

.emotion-4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
}

.emotion-5 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: auto;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  min-height: 0;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin-bottom: 0!important;
}

.emotion-5>div {
  width: auto;
}

.emotion-6 {
  box-sizing: border-box;
  -webkit-flex-basis: auto;
  -ms-flex-preferred-size: auto;
  flex-basis: auto;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  width: initial;
  display: inherit;
}

.emotion-7 {
  border-color: var(--themeBorder, #DADDE2);
  background-color: var(--themeBgPrimary, #FFFFFF);
  border-style: solid;
  border-width: 1px;
  height: 14px;
  width: 14px;
  background-color: var(--themeBrandPrimary, #7D58FF);
  border-color: var(--themeBrandPrimary, #7D58FF);
  border-radius: 4px;
  position: relative;
}

.emotion-8 {
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}

.emotion-9 {
  box-sizing: border-box;
  height: 100%;
  padding: 2px;
  position: absolute;
  width: 100%;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.emotion-9 svg {
  height: 100%;
  width: 100%;
}

.emotion-10 {
  vertical-align: middle;
  fill: var(--themeBgPrimary, #FFFFFF);
}

.emotion-10 use {
  pointer-events: none;
}

.emotion-11 {
  box-sizing: border-box;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  min-width: 0;
  width: auto;
  padding-left: 12px;
}

.emotion-25 {
  border-color: var(--themeBorder, #DADDE2);
  background-color: var(--themeBgPrimary, #FFFFFF);
  border-style: solid;
  border-width: 1px;
  height: 14px;
  width: 14px;
  border-radius: 4px;
  position: relative;
}

<ToggleInputList
  id="checkbox"
  items={
    Array [
      Object {
        "id": "id.1",
        "inputLabel": "Sample label",
        "value": "value.1",
      },
      Object {
        "id": "id.2",
        "inputLabel": "Sample label",
        "value": "value.2",
      },
      Object {
        "id": "id.3",
        "inputLabel": "Sample label",
        "value": "value.3",
      },
    ]
  }
  labelAppearance="standard"
  listLabel="Sample legend"
  selectedItems={
    Array [
      "value.1",
      "value.2",
    ]
  }
  showListLabel={true}
  vertAlign="center"
>
  <FormFieldWrapper
    id="checkbox"
  >
    <fieldset
      aria-describedby=""
      aria-invalid={false}
      className="emotion-0"
      role="listbox"
    >
      <legend
        className="emotion-1"
      >
        Sample legend
      </legend>
      <ul
        className="emotion-2"
      >
        <li
          className="emotion-3"
          key="id.1"
        >
          <CheckboxInput
            checked={true}
            id="id.1"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.1"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={true}
              id="id.1"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.1"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.1"
              >
                <div
                  className="emotion-4"
                  data-cy="checkboxInput checkboxInput.checked"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.1"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={true}
                          className="emotion-8"
                          data-cy="checkboxInput-input checkboxInput-input.checked"
                          id="id.1"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.1"
                        />
                        <span
                          className="emotion-9"
                        >
                          <Icon
                            color="var(--themeBgPrimary, #FFFFFF)"
                            shape="system-check"
                            size="xs"
                          >
                            <svg
                              aria-label="system-check icon"
                              className="emotion-10"
                              data-cy="icon"
                              height={16}
                              preserveAspectRatio="xMinYMin meet"
                              role="img"
                              viewBox="0 0 16 16"
                              width={16}
                            >
                              <use
                                xlinkHref="#system-check"
                              />
                            </svg>
                          </Icon>
                        </span>
                      </div>
                    </div>
                    <div
                      className="emotion-11"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
        <li
          className="emotion-3"
          key="id.2"
        >
          <CheckboxInput
            checked={true}
            id="id.2"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.2"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={true}
              id="id.2"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.2"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.2"
              >
                <div
                  className="emotion-4"
                  data-cy="checkboxInput checkboxInput.checked"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.2"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-7"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={true}
                          className="emotion-8"
                          data-cy="checkboxInput-input checkboxInput-input.checked"
                          id="id.2"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.2"
                        />
                        <span
                          className="emotion-9"
                        >
                          <Icon
                            color="var(--themeBgPrimary, #FFFFFF)"
                            shape="system-check"
                            size="xs"
                          >
                            <svg
                              aria-label="system-check icon"
                              className="emotion-10"
                              data-cy="icon"
                              height={16}
                              preserveAspectRatio="xMinYMin meet"
                              role="img"
                              viewBox="0 0 16 16"
                              width={16}
                            >
                              <use
                                xlinkHref="#system-check"
                              />
                            </svg>
                          </Icon>
                        </span>
                      </div>
                    </div>
                    <div
                      className="emotion-11"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
        <li
          className="emotion-3"
          key="id.3"
        >
          <CheckboxInput
            checked={false}
            id="id.3"
            inputLabel="Sample label"
            name="checkbox"
            onChange={[Function]}
            value="value.3"
            vertAlign="center"
          >
            <ForwardRef
              appearance="standard"
              checked={false}
              id="id.3"
              inputLabel="Sample label"
              inputType="checkbox"
              name="checkbox"
              onChange={[Function]}
              showInputLabel={true}
              value="value.3"
              vertAlign="center"
            >
              <FormFieldWrapper
                id="id.3"
              >
                <div
                  className="emotion-4"
                  data-cy="checkboxInput"
                >
                  <label
                    className="emotion-5"
                    htmlFor="id.3"
                  >
                    <div
                      className="emotion-6"
                    >
                      <div
                        className="emotion-25"
                      >
                        <input
                          aria-describedby=""
                          aria-invalid={false}
                          checked={false}
                          className="emotion-8"
                          data-cy="checkboxInput-input"
                          id="id.3"
                          name="checkbox"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value="value.3"
                        />
                      </div>
                    </div>
                    <div
                      className="emotion-11"
                    >
                      Sample label
                    </div>
                  </label>
                </div>
              </FormFieldWrapper>
            </ForwardRef>
          </CheckboxInput>
        </li>
      </ul>
    </fieldset>
  </FormFieldWrapper>
</ToggleInputList>
`;
